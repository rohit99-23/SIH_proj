const admin = require("firebase-admin");const path = require("path");const serviceAccount = require(path.resolve(__dirname, "../serviceAccountKey.json"));admin.initializeApp({ credential: admin.credential.cert(serviceAccount) });const auth = admin.auth();const db = admin.firestore();const admins = [  "riddhimas404@gmail.com",  "rohitkumarsnt@gmail.com"];async function ensureAdmin(email) {  email = email.toLowerCase().trim();  let user;  try {    user = await auth.getUserByEmail(email);    console.log("Found user:", email, user.uid);  } catch (err) {    if (err.code === "auth/user-not-found" || /user-not-found/i.test(err.message)) {      const temp = Math.random().toString(36).slice(-10) + "A1!";      user = await auth.createUser({ email, password: temp });      console.log("Created user:", email, user.uid);    } else {      throw err;    }  }  await auth.setCustomUserClaims(user.uid, { admin: true });  await db.collection("users").doc(user.uid).set({    email,    role: "admin",    createdAt: admin.firestore.FieldValue.serverTimestamp(),  }, { merge: true });  const link = await auth.generatePasswordResetLink(email, { url: "http://localhost:3000/login" });  return { email, uid: user.uid, link };}(async () => {  for (const email of admins) {    try {      const res = await ensureAdmin(email);      console.log("Admin ready:", res.email, res.uid);      console.log("Password reset link:", res.link);    } catch (e) {      console.error("Error for", email, e);    }  }  process.exit(0);})();